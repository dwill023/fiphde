% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/forecast.R
\name{ts_fit_forecast}
\alias{ts_fit_forecast}
\title{Fit and forecast with time-series approaches.}
\usage{
ts_fit_forecast(
  prepped_tsibble,
  outcome = "flu.admits",
  horizon = 4L,
  trim_date = "2021-01-01",
  models = list(arima = "PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)", ets =
    "season(method=\\"N\\")", nnetar = NULL),
  covariates = c("hosp_rank", "ili_rank"),
  ensemble = TRUE,
  ...
)
}
\arguments{
\item{prepped_tsibble}{A tsibble with data retrieved from \link{get_hdgov_hosp}, prepped by \link{prep_hdgov_hosp}, and made into a tsibble with \link{make_tsibble}.}

\item{outcome}{The outcome variable to model (default \code{"flu.admits"}).}

\item{horizon}{Number of weeks ahead}

\item{trim_date}{The date (YYYY-MM-DD) at which point ts modeling should be started. Default \code{"2021-01-01"}. Set to \code{NULL} to stop trimming.}

\item{models}{A list of right hand side formula contents for models you want to run. See the examples.}

\item{covariates}{Covariates that should be modeled with the time series. Defaults to \code{c("hosp_rank", "ili_rank")}, from the historical data brought in with \link{prep_hdgov_hosp}.}

\item{ensemble}{Should ARIMA and ETS models be ensembled? Default \code{TRUE}.}

\item{...}{Further arguments that are passed to \link[fable:ARIMA]{fable::ARIMA}.
\itemize{
\item Defaults to \code{list(arima = "PDQ(0, 0, 0) + pdq(1:2, 0:2, 0)", ets = "season(method='N')", nnetar = NULL)}
\item Setting the type of model to \code{NULL} turns the model off.
\item To run an unconstrained ARIMA: \code{list(arima='PDQ() + pdq()')}. See also \link[fable:ARIMA]{fable::ARIMA}.
\item To run a seasonal exponential smoothing: \code{list(ets='season(method=c("A", "M", "N"), period="3 months")')}. See also \link[fable:ETS]{fable::ETS}.
\item To run an autoregressive neural net with P=1: \code{list(nnetar="AR(P=1)")}. See also \link[fable:NNETAR]{fable::NNETAR}.
}}
}
\value{
A list of the time series fit, time series forecast, and model formulas.
\itemize{
\item \code{tsfit}: A \code{mdl_df} class "mable" with one row for each location, columns for arima and ets models.
\item \code{tsfor}: A \code{fbl_ts} class "fable" with one row per location-model-timepoint up to \code{horizon} number of time points.
\item \code{formulas}: A list of ARIMA, ETS, and/or NNETAR formulas
}
}
\description{
Fit and forecast with time-series approaches.
}
\examples{
\dontrun{
h_raw <- get_hdgov_hosp(limitcols=TRUE)
## save(h_raw, file="~/Downloads/h_raw.rd")
## load(file="~/Downloads/h_raw.rd")
prepped_hosp <- prep_hdgov_hosp(h_raw)
prepped_tsibble <- make_tsibble(prepped_hosp,
                                     epiyear = epiyear,
                                     epiweek=epiweek,
                                     key=location)
prepped_tsibble <-
  prepped_tsibble \%>\%
  dplyr::filter(location \%in\% c("US", "51"))
# Run with default constrained ARIMA, nonseasonal ETS, no NNETAR
hosp_fitfor <- ts_fit_forecast(prepped_tsibble,
                               horizon=4L,
                               outcome="flu.admits",
                               covariates=c("hosp_rank", "ili_rank"))
# Run an unconstrained ARIMA, seasonal ETS, no NNETAR
hosp_fitfor <- ts_fit_forecast(prepped_tsibble,
                               horizon=4L,
                               outcome="flu.admits",
                               covariates=c("hosp_rank", "ili_rank"),
                               models=list(arima='PDQ() + pdq()',
                                           ets='season(method=c("A", "M", "N"), period="3 months")',
                                           nnetar=NULL))
hosp_fitfor <- ts_fit_forecast(prepped_tsibble,
                               horizon=4L,
                               outcome="flu.admits",
                               covariates=c("hosp_rank", "ili_rank"),
                               models=list(arima='PDQ() + pdq()',
                                           ets='season(method=c("A", "M", "N"), period="3 months")',
                                           nnetar="AR(P=1)"))
}
}
