% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utils.R
\name{plot_forecast}
\alias{plot_forecast}
\title{Plot forecasts}
\usage{
plot_forecast(.data, submission, location = "US", pi = TRUE)
}
\arguments{
\item{.data}{Historical truth data for all locations and outcomes in submission targets}

\item{submission}{Formatted submission}

\item{location}{Vector specifying locations to filter to; 'US' by default.}

\item{pi}{Logical as to whether or not the plot should include 95\% prediction interval; default is \code{TRUE}}
}
\value{
A \code{ggplot2} plot object with line plots for outcome trajectories faceted by location
}
\description{
This function serves as a plotting mechanism for prepped forecast submission data. Using truth data supplied, the plots show the historical trajectory of weekly flu hospitalizations along with the point estimates for forecasts. Optionally, the user can include 95\% prediction interval as well. Plots include trajectories of weekly flu hospitalizations faceted by location.
}
\examples{
\dontrun{
# Get some data
h_raw <- get_hdgov_hosp(limitcols=TRUE)
## save(h_raw, file="~/Downloads/h_raw.rd")
## load(file="~/Downloads/h_raw.rd")

# Prep all the data
prepped_hosp_all <- prep_hdgov_hosp(h_raw)

# What are the last four weeks of recorded data?
last4 <-
  prepped_hosp_all \%>\%
  distinct(week_start) \%>\%
  arrange(week_start) \%>\%
  tail(4)

#remove those
prepped_hosp <-
  prepped_hosp \%>\%
  anti_join(last4, by="week_start")

# Make a tsibble
prepped_hosp_tsibble <- make_tsibble(prepped_hosp,
                                     epiyear = epiyear,
                                     epiweek=epiweek,
                                     key=location)
# Limit to just one state and US
prepped_hosp_tsibble <-
  prepped_hosp_tsibble \%>\%
  dplyr::filter(location \%in\% c("US", "51"))

# Fit models and forecasts
hosp_fitfor <- ts_fit_forecast(prepped_hosp_tsibble,
                               horizon=4L,
                               outcome="flu.admits",
                               constrained=TRUE,
                               trim_date=NULL,
                               covariates=c("hosp_rank", "ili_rank"))

# Format for submission
hosp_formatted <- ts_format_for_submission(hosp_fitfor$tsfor)

# Plot with current and all data
plot_forecast(prepped_hosp, hosp_formatted$ensemble)
plot_forecast(prepped_hosp_all, hosp_formatted$ensemble)
plot_forecast(prepped_hosp, hosp_formatted$ensemble, location=c("US", "51"))
plot_forecast(prepped_hosp_all, hosp_formatted$ensemble, location=c("US", "51"))
plot_forecast(prepped_hosp, hosp_formatted$ets)
plot_forecast(prepped_hosp_all, hosp_formatted$ets)
plot_forecast(prepped_hosp, hosp_formatted$arima)
plot_forecast(prepped_hosp_all, hosp_formatted$arima)
}

}
